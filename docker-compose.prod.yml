version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: your_program_postgres
    environment:
      POSTGRES_DB: your_program_db
      POSTGRES_USER: your_program_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - your_program_network
    restart: unless-stopped

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: your_program_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - your_program_network
    restart: unless-stopped

  # 백엔드 API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: your_program_backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://your_program_user:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/your_program_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret}
    volumes:
      - ./logs:/app/logs
      - ./ml_models:/app/ml_models
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - your_program_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - your_program_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: your_program_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - your_program_network
    restart: unless-stopped

  # 모니터링 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: your_program_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - your_program_network
    restart: unless-stopped

  # 모니터링 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: your_program_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - your_program_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  your_program_network:
    driver: bridge 

