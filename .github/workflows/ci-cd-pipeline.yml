name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 새벽 2시에 자동 테스트 실행
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DATABASE_URL: 'sqlite:///test.db'
  TESTING: 'true'

jobs:
  # 백엔드 테스트
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check .
        isort --check-only .
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
        coverage report --fail-under=80
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ --cov=app --cov-append --cov-report=xml --cov-report=html
        
    - name: Run performance tests
      run: |
        pytest tests/performance/ --benchmark-only
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          test-results/
          
  # 프론트엔드 테스트
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: your_program_frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: your_program_frontend
      run: npm ci
      
    - name: Run linting
      working-directory: your_program_frontend
      run: |
        npm run lint
        npm run type-check
        
    - name: Run unit tests
      working-directory: your_program_frontend
      run: |
        npm run test:unit -- --coverage --watchAll=false
        npm run test:coverage
        
    - name: Run integration tests
      working-directory: your_program_frontend
      run: |
        npm run test:integration
        
    - name: Build application
      working-directory: your_program_frontend
      run: npm run build
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: your_program_frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: your_program_frontend/.next/
        
  # E2E 테스트
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: your_program_frontend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: Install frontend dependencies
      working-directory: your_program_frontend
      run: npm ci
      
    - name: Start backend server
      run: |
        python -m pytest tests/e2e/setup.py --setup-only
        python app.py --test-mode &
        sleep 10
        
    - name: Start frontend server
      working-directory: your_program_frontend
      run: |
        npm run build
        npm start &
        sleep 15
        
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ --headed --slowmo 1000
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          test-results/
          screenshots/
          
  # 보안 테스트
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install bandit safety pip-audit
        
    - name: Run security scans
      run: |
        # Bandit - Python 보안 검사
        bandit -r . -f json -o bandit-report.json || true
        
        # Safety - 의존성 취약점 검사
        safety check --json --output safety-report.json || true
        
        # Pip audit
        pip-audit --format json --output pip-audit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          
  # 성능 테스트
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
        
    - name: Start application
      run: |
        python app.py --test-mode &
        sleep 10
        
    - name: Run load tests
      run: |
        locust -f tests/performance/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 60s
        
    - name: Run stress tests
      run: |
        python tests/performance/stress_test.py
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          locust-report.html
          stress-test-results.json
          
  # 플러그인 모니터링 테스트
  plugin-monitoring-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: Run plugin monitoring tests
      run: |
        # 플러그인 모니터링 시스템 테스트
        python -m pytest tests/plugin_monitoring/ --cov=core.backend.plugin_monitoring
        
        # 고급 모니터링 테스트
        python -m pytest tests/advanced_monitoring/ --cov=core.backend.advanced_plugin_monitoring
        
        # 실시간 알림 테스트
        python -m pytest tests/realtime_alerts/ --cov=core.backend.realtime_alert_server
        
    - name: Test WebSocket connections
      run: |
        python tests/websocket_test.py
        
    - name: Test alert system
      run: |
        python tests/alert_system_test.py
        
    - name: Upload monitoring test results
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-test-results
        path: |
          test-results/
          coverage.xml
          
  # 품질 게이트
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-tests, performance-tests, plugin-monitoring-tests]
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      
    - name: Run quality checks
      run: |
        # 테스트 커버리지 확인
        python scripts/check_coverage.py
        
        # 성능 기준 확인
        python scripts/check_performance.py
        
        # 보안 기준 확인
        python scripts/check_security.py
        
    - name: Generate quality report
      run: |
        python scripts/generate_quality_report.py
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.html
        
  # 스테이징 배포
  staging-deploy:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        cd your_program_frontend && npm ci
        
    - name: Build frontend
      working-directory: your_program_frontend
      run: npm run build
      
    - name: Deploy to staging
      run: |
        # 스테이징 환경 배포 스크립트
        python scripts/deploy_staging.py
        
    - name: Run smoke tests
      run: |
        # 스테이징 환경 스모크 테스트
        python tests/smoke_tests.py --environment staging
        
    - name: Notify deployment
      run: |
        # 배포 알림 전송
        python scripts/notify_deployment.py --environment staging --status success
        
  # 프로덕션 배포
  production-deploy:
    runs-on: ubuntu-latest
    needs: [quality-gate, staging-deploy]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        cd your_program_frontend && npm ci
        
    - name: Build frontend
      working-directory: your_program_frontend
      run: npm run build
      
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          - Backend tests: ✅
          - Frontend tests: ✅
          - E2E tests: ✅
          - Security tests: ✅
          - Performance tests: ✅
          - Plugin monitoring tests: ✅
        draft: false
        prerelease: false
        
    - name: Deploy to production
      run: |
        # 프로덕션 환경 배포 스크립트
        python scripts/deploy_production.py
        
    - name: Run production health checks
      run: |
        # 프로덕션 환경 헬스 체크
        python scripts/health_check.py --environment production
        
    - name: Notify deployment
      run: |
        # 배포 알림 전송
        python scripts/notify_deployment.py --environment production --status success
        
  # 모니터링 설정
  monitoring-setup:
    runs-on: ubuntu-latest
    needs: [production-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Setup monitoring
      run: |
        # 플러그인 모니터링 시스템 설정
        python scripts/setup_monitoring.py
        
        # 알림 시스템 설정
        python scripts/setup_alerts.py
        
        # 대시보드 설정
        python scripts/setup_dashboards.py
        
    - name: Verify monitoring
      run: |
        # 모니터링 시스템 검증
        python scripts/verify_monitoring.py
        
    - name: Notify monitoring setup
      run: |
        # 모니터링 설정 완료 알림
        python scripts/notify_monitoring_setup.py 