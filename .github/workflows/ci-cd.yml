name: Your Program CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy
          
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci
          cd ../gateway
          npm ci
          
      - name: Run Python linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .
          
      - name: Run TypeScript linting
        run: |
          cd frontend
          npm run lint
          cd ../gateway
          npm run lint
          
      - name: Run type checking
        run: |
          cd frontend
          npm run type-check
          
  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Snyk security scan
        run: |
          echo "Snyk security scan skipped - SNYK_TOKEN not configured"
        continue-on-error: true
          
  # 단위 테스트
  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: your_program_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock
          
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci
          cd ../gateway
          npm ci
          
      - name: Run Python unit tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/your_program_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
          
      - name: Run Node.js unit tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
          cd ../gateway
          npm test
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
  # 통합 테스트
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker images
        run: |
          docker build -f Dockerfile.backend -t your-program-backend:test .
          docker build -f Dockerfile.ai -t your-program-ai:test .
          docker build -f frontend/Dockerfile -t your-program-frontend:test ./frontend
          docker build -f Dockerfile.gateway -t your-program-gateway:test .
          
      - name: Start services
        run: |
          docker-compose up -d postgres redis
          sleep 10
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://your_program:password@localhost:5432/your_program
          REDIS_URL: redis://localhost:6379
        run: |
          python -m pytest tests/integration/ -v
          
      - name: Run API tests
        run: |
          python scripts/api-test.py
          
  # E2E 테스트
  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Build application
        run: |
          cd frontend
          npm run build
          
      - name: Start application
        run: |
          docker-compose up -d
          sleep 30
          
      - name: Run E2E tests
        run: |
          cd frontend
          npm run cypress:run
          
  # 빌드 및 푸시
  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        run: |
          echo "Docker Hub login skipped - credentials not configured"
        continue-on-error: true
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            your-program/backend
            your-program/ai-server
            your-program/frontend
            your-program/gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: your-program/backend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push AI server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ai
          push: true
          tags: your-program/ai-server:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: your-program/frontend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push gateway
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.gateway
          push: true
          tags: your-program/gateway:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          
  # 스테이징 배포
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # 여기에 스테이징 배포 스크립트 추가
          
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f http://staging.yourprogram.com/health
          
      - name: Notify deployment
        run: |
          echo "Slack notification skipped - SLACK_WEBHOOK_URL not configured"
        continue-on-error: true
          
  # 프로덕션 배포
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://yourprogram.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # 여기에 프로덕션 배포 스크립트 추가
          
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://yourprogram.com/health
          
      - name: Notify deployment
        run: |
          echo "Slack notification skipped - SLACK_WEBHOOK_URL not configured"
        continue-on-error: true
          
  # 성능 테스트
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run performance tests
        run: |
          # 부하 테스트 실행
          ab -n 1000 -c 10 http://staging.yourprogram.com/health
          ab -n 1000 -c 10 https://yourprogram.com/health
          
      - name: Generate performance report
        run: |
          echo "Performance test results:" > performance-report.txt
          echo "Staging: $(ab -n 100 -c 5 http://staging.yourprogram.com/health 2>/dev/null | grep 'Requests per second')" >> performance-report.txt
          echo "Production: $(ab -n 100 -c 5 https://yourprogram.com/health 2>/dev/null | grep 'Requests per second')" >> performance-report.txt
          
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.txt
          
  # 모니터링 알림
  monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Check application health
        run: |
          # 헬스체크
          curl -f http://staging.yourprogram.com/health || echo "Staging health check failed"
          curl -f https://yourprogram.com/health || echo "Production health check failed"
          
      - name: Check monitoring dashboards
        run: |
          # 모니터링 대시보드 확인
          curl -f http://staging.yourprogram.com:3001/api/health || echo "Staging monitoring failed"
          curl -f https://yourprogram.com:3001/api/health || echo "Production monitoring failed"
          
      - name: Send monitoring report
        run: |
          echo "Slack monitoring report skipped - SLACK_WEBHOOK_URL not configured"
        continue-on-error: true 
