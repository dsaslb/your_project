#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Î™®Îìà Í∞úÎ∞ú Î™®Îìú ÏãúÏä§ÌÖú
Ïã§Ï†ú SaaS/ÎÖ∏ÏΩîÎìú Ìà¥ ÏàòÏ§ÄÏùò Í∞úÎ∞ú¬∑ÌÖåÏä§Ìä∏¬∑Î∞∞Ìè¨ ÏãúÏä§ÌÖú
"""

import os
import json
import sqlite3
import shutil
import zipfile
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path
import threading
import time

class ModuleDevelopmentSystem:
    def __init__(self, sandbox_path: str = "sandbox", production_path: str = "production"):
        self.sandbox_path = Path(sandbox_path)
        self.production_path = Path(production_path)
        self.sandbox_path.mkdir(exist_ok=True)
        self.production_path.mkdir(exist_ok=True)
        
        self.init_sandbox_database()
        self.init_component_library()
        self.create_sample_projects()
    
    def init_sandbox_database(self):
        """ÏÉåÎìúÎ∞ïÏä§ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî"""
        db_path = self.sandbox_path / "sandbox.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Í∞úÎ∞ú ÌîÑÎ°úÏ†ùÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS development_projects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                module_type TEXT NOT NULL,
                status TEXT DEFAULT 'development',
                version TEXT DEFAULT '1.0.0',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by TEXT NOT NULL,
                settings TEXT,
                preview_data TEXT
            )
        ''')
        
        # Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS components (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                component_id TEXT NOT NULL,
                type TEXT NOT NULL,
                name TEXT NOT NULL,
                position_x INTEGER DEFAULT 0,
                position_y INTEGER DEFAULT 0,
                width INTEGER DEFAULT 200,
                height INTEGER DEFAULT 100,
                properties TEXT,
                styles TEXT,
                parent_id TEXT,
                order_index INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES development_projects (project_id)
            )
        ''')
        
        # ÌéòÏù¥ÏßÄ ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                page_id TEXT NOT NULL,
                name TEXT NOT NULL,
                route TEXT NOT NULL,
                layout TEXT DEFAULT 'default',
                components TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES development_projects (project_id)
            )
        ''')
        
        # Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS versions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                version_id TEXT NOT NULL,
                version_name TEXT NOT NULL,
                description TEXT,
                snapshot_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by TEXT NOT NULL,
                FOREIGN KEY (project_id) REFERENCES development_projects (project_id)
            )
        ''')
        
        # Î∞∞Ìè¨ Í∏∞Î°ù ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS deployments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                deployment_id TEXT NOT NULL,
                version_id TEXT NOT NULL,
                environment TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                deployed_at TIMESTAMP,
                deployed_by TEXT NOT NULL,
                rollback_available BOOLEAN DEFAULT 1,
                FOREIGN KEY (project_id) REFERENCES development_projects (project_id)
            )
        ''')
        
        # ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌÖåÏù¥Î∏î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS test_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                data_type TEXT NOT NULL,
                data_name TEXT NOT NULL,
                data_content TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES development_projects (project_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def init_component_library(self):
        """Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨ Ï¥àÍ∏∞Ìôî"""
        self.component_library = {
            'basic': [
                {
                    'type': 'button',
                    'name': 'Î≤ÑÌäº',
                    'icon': 'üîò',
                    'default_properties': {
                        'text': 'Î≤ÑÌäº',
                        'variant': 'primary',
                        'size': 'medium'
                    },
                    'default_styles': {
                        'backgroundColor': '#3498db',
                        'color': 'white',
                        'border': 'none',
                        'borderRadius': '4px',
                        'padding': '8px 16px',
                        'cursor': 'pointer'
                    }
                },
                {
                    'type': 'card',
                    'name': 'Ïπ¥Îìú',
                    'icon': 'üÉè',
                    'default_properties': {
                        'title': 'Ïπ¥Îìú Ï†úÎ™©',
                        'content': 'Ïπ¥Îìú ÎÇ¥Ïö©'
                    },
                    'default_styles': {
                        'backgroundColor': 'white',
                        'border': '1px solid #ddd',
                        'borderRadius': '8px',
                        'padding': '16px',
                        'boxShadow': '0 2px 4px rgba(0,0,0,0.1)'
                    }
                },
                {
                    'type': 'form',
                    'name': 'Ìèº',
                    'icon': 'üìù',
                    'default_properties': {
                        'title': 'Ìèº Ï†úÎ™©',
                        'fields': []
                    },
                    'default_styles': {
                        'backgroundColor': 'white',
                        'border': '1px solid #ddd',
                        'borderRadius': '8px',
                        'padding': '20px'
                    }
                },
                {
                    'type': 'input',
                    'name': 'ÏûÖÎ†• ÌïÑÎìú',
                    'icon': 'üìù',
                    'default_properties': {
                        'placeholder': 'ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                        'type': 'text',
                        'label': 'ÎùºÎ≤®'
                    },
                    'default_styles': {
                        'border': '1px solid #ddd',
                        'borderRadius': '4px',
                        'padding': '8px 12px',
                        'width': '100%'
                    }
                },
                {
                    'type': 'table',
                    'name': 'ÌÖåÏù¥Î∏î',
                    'icon': 'üìä',
                    'default_properties': {
                        'headers': ['Ïª¨Îüº1', 'Ïª¨Îüº2', 'Ïª¨Îüº3'],
                        'data': [['Îç∞Ïù¥ÌÑ∞1', 'Îç∞Ïù¥ÌÑ∞2', 'Îç∞Ïù¥ÌÑ∞3']]
                    },
                    'default_styles': {
                        'width': '100%',
                        'borderCollapse': 'collapse',
                        'border': '1px solid #ddd'
                    }
                }
            ],
            'advanced': [
                {
                    'type': 'chart',
                    'name': 'Ï∞®Ìä∏',
                    'icon': 'üìà',
                    'default_properties': {
                        'type': 'line',
                        'data': {'labels': ['1Ïõî', '2Ïõî', '3Ïõî'], 'values': [10, 20, 15]}
                    },
                    'default_styles': {
                        'width': '100%',
                        'height': '300px'
                    }
                },
                {
                    'type': 'calendar',
                    'name': 'Ï∫òÎ¶∞Îçî',
                    'icon': 'üìÖ',
                    'default_properties': {
                        'view': 'month',
                        'events': []
                    },
                    'default_styles': {
                        'width': '100%',
                        'height': '400px'
                    }
                },
                {
                    'type': 'modal',
                    'name': 'Î™®Îã¨',
                    'icon': 'ü™ü',
                    'default_properties': {
                        'title': 'Î™®Îã¨ Ï†úÎ™©',
                        'content': 'Î™®Îã¨ ÎÇ¥Ïö©',
                        'show': False
                    },
                    'default_styles': {
                        'position': 'fixed',
                        'top': '50%',
                        'left': '50%',
                        'transform': 'translate(-50%, -50%)',
                        'backgroundColor': 'white',
                        'padding': '20px',
                        'borderRadius': '8px',
                        'boxShadow': '0 4px 20px rgba(0,0,0,0.3)'
                    }
                }
            ]
        }
    
    def create_project(self, name: str, description: str, module_type: str, created_by: str) -> Dict:
        """ÏÉà Í∞úÎ∞ú ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        project_id = str(uuid.uuid4())
        
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO development_projects 
            (project_id, name, description, module_type, created_by)
            VALUES (?, ?, ?, ?, ?)
        ''', (project_id, name, description, module_type, created_by))
        
        # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        project_dir = self.sandbox_path / project_id
        project_dir.mkdir(exist_ok=True)
        
        # Í∏∞Î≥∏ ÌååÏùº ÏÉùÏÑ±
        self.create_project_files(project_dir, name, module_type)
        
        conn.commit()
        conn.close()
        
        return {
            'project_id': project_id,
            'name': name,
            'status': 'development',
            'created_at': datetime.now().isoformat()
        }
    
    def create_project_files(self, project_dir: Path, name: str, module_type: str):
        """ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Î≥∏ ÌååÏùº ÏÉùÏÑ±"""
        # package.json
        package_json = {
            'name': name.lower().replace(' ', '-'),
            'version': '1.0.0',
            'description': f'{name} Î™®Îìà',
            'type': module_type,
            'main': 'index.js',
            'scripts': {
                'dev': 'python -m flask run --port 5002',
                'build': 'python build.py',
                'test': 'python test.py'
            },
            'dependencies': {
                'flask': '^2.0.0',
                'sqlite3': '^3.0.0'
            }
        }
        
        with open(project_dir / 'package.json', 'w', encoding='utf-8') as f:
            json.dump(package_json, f, indent=2, ensure_ascii=False)
        
        # Í∏∞Î≥∏ Python ÌååÏùº
        main_py = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
{name} Î™®Îìà
"""

from flask import Flask, render_template, request, jsonify
import sqlite3
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/data')
def api_data():
    return jsonify({{'message': 'Hello from {name}!'}})

if __name__ == '__main__':
    app.run(debug=True, port=5002)
'''
        
        with open(project_dir / 'main.py', 'w', encoding='utf-8') as f:
            f.write(main_py)
        
        # templates ÎîîÎ†âÌÜ†Î¶¨
        templates_dir = project_dir / 'templates'
        templates_dir.mkdir(exist_ok=True)
        
        # Í∏∞Î≥∏ HTML ÌÖúÌîåÎ¶ø
        index_html = f'''<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{name}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #333;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{name} Î™®Îìà</h1>
        <p>Ïù¥ ÌéòÏù¥ÏßÄÎäî {name} Î™®ÎìàÏùò Î©îÏù∏ ÌéòÏù¥ÏßÄÏûÖÎãàÎã§.</p>
        <div id="app">
            <!-- Ïó¨Í∏∞Ïóê Ïª¥Ìè¨ÎÑåÌä∏Îì§Ïù¥ Î†åÎçîÎßÅÎê©ÎãàÎã§ -->
        </div>
    </div>
    
    <script>
        // API Ìò∏Ï∂ú ÏòàÏãú
        fetch('/api/data')
            .then(response => response.json())
            .then(data => {{
                console.log(data);
            }});
    </script>
</body>
</html>
'''
        
        with open(templates_dir / 'index.html', 'w', encoding='utf-8') as f:
            f.write(index_html)
    
    def get_projects(self, user_id: str) -> List[Dict]:
        """ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT project_id, name, description, module_type, status, version, 
                   created_at, updated_at
            FROM development_projects 
            WHERE created_by = ?
            ORDER BY updated_at DESC
        ''', (user_id,))
        
        projects = []
        for row in cursor.fetchall():
            projects.append({
                'project_id': row[0],
                'name': row[1],
                'description': row[2],
                'module_type': row[3],
                'status': row[4],
                'version': row[5],
                'created_at': row[6],
                'updated_at': row[7]
            })
        
        conn.close()
        return projects
    
    def get_project(self, project_id: str) -> Optional[Dict]:
        """ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT project_id, name, description, module_type, status, version, 
                   created_at, updated_at, settings, preview_data
            FROM development_projects 
            WHERE project_id = ?
        ''', (project_id,))
        
        row = cursor.fetchone()
        if row:
            project = {
                'project_id': row[0],
                'name': row[1],
                'description': row[2],
                'module_type': row[3],
                'status': row[4],
                'version': row[5],
                'created_at': row[6],
                'updated_at': row[7],
                'settings': json.loads(row[8]) if row[8] else {},
                'preview_data': json.loads(row[9]) if row[9] else {}
            }
            
            # Ïª¥Ìè¨ÎÑåÌä∏ Î™©Î°ù Ï°∞Ìöå
            cursor.execute('''
                SELECT component_id, type, name, position_x, position_y, 
                       width, height, properties, styles, parent_id, order_index
                FROM components 
                WHERE project_id = ?
                ORDER BY order_index
            ''', (project_id,))
            
            components = []
            for comp_row in cursor.fetchall():
                components.append({
                    'component_id': comp_row[0],
                    'type': comp_row[1],
                    'name': comp_row[2],
                    'position_x': comp_row[3],
                    'position_y': comp_row[4],
                    'width': comp_row[5],
                    'height': comp_row[6],
                    'properties': json.loads(comp_row[7]) if comp_row[7] else {},
                    'styles': json.loads(comp_row[8]) if comp_row[8] else {},
                    'parent_id': comp_row[9],
                    'order_index': comp_row[10]
                })
            
            project['components'] = components
            
            conn.close()
            return project
        
        conn.close()
        return None
    
    def add_component(self, project_id: str, component_data: Dict) -> Dict:
        """Ïª¥Ìè¨ÎÑåÌä∏ Ï∂îÍ∞Ä"""
        component_id = str(uuid.uuid4())
        
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO components 
            (project_id, component_id, type, name, position_x, position_y, 
             width, height, properties, styles, parent_id, order_index)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            project_id,
            component_id,
            component_data['type'],
            component_data['name'],
            component_data.get('position_x', 0),
            component_data.get('position_y', 0),
            component_data.get('width', 200),
            component_data.get('height', 100),
            json.dumps(component_data.get('properties', {})),
            json.dumps(component_data.get('styles', {})),
            component_data.get('parent_id'),
            component_data.get('order_index', 0)
        ))
        
        conn.commit()
        conn.close()
        
        return {
            'component_id': component_id,
            'success': True
        }
    
    def update_component(self, project_id: str, component_id: str, updates: Dict) -> Dict:
        """Ïª¥Ìè¨ÎÑåÌä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        # ÏóÖÎç∞Ïù¥Ìä∏Ìï† ÌïÑÎìúÎì§
        update_fields = []
        params = []
        
        for field, value in updates.items():
            if field in ['position_x', 'position_y', 'width', 'height', 'order_index']:
                update_fields.append(f"{field} = ?")
                params.append(value)
            elif field in ['properties', 'styles']:
                update_fields.append(f"{field} = ?")
                params.append(json.dumps(value))
            elif field in ['type', 'name', 'parent_id']:
                update_fields.append(f"{field} = ?")
                params.append(value)
        
        if update_fields:
            params.extend([project_id, component_id])
            query = f'''
                UPDATE components 
                SET {', '.join(update_fields)}
                WHERE project_id = ? AND component_id = ?
            '''
            cursor.execute(query, params)
            
            conn.commit()
            conn.close()
            
            return {'success': True}
        
        conn.close()
        return {'success': False, 'error': 'ÏóÖÎç∞Ïù¥Ìä∏Ìï† ÌïÑÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.'}
    
    def delete_component(self, project_id: str, component_id: str) -> Dict:
        """Ïª¥Ìè¨ÎÑåÌä∏ ÏÇ≠Ï†ú"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            DELETE FROM components 
            WHERE project_id = ? AND component_id = ?
        ''', (project_id, component_id))
        
        conn.commit()
        conn.close()
        
        return {'success': True}
    
    def create_version(self, project_id: str, version_name: str, description: str, created_by: str) -> Dict:
        """Î≤ÑÏ†Ñ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±"""
        version_id = str(uuid.uuid4())
        
        # ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú Ïä§ÎÉÖÏÉ∑
        project = self.get_project(project_id)
        if not project:
            return {'success': False, 'error': 'ÌîÑÎ°úÏ†ùÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'}
        
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO versions 
            (project_id, version_id, version_name, description, snapshot_data, created_by)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            project_id,
            version_id,
            version_name,
            description,
            json.dumps(project),
            created_by
        ))
        
        conn.commit()
        conn.close()
        
        return {
            'version_id': version_id,
            'success': True
        }
    
    def get_versions(self, project_id: str) -> List[Dict]:
        """ÌîÑÎ°úÏ†ùÌä∏ Î≤ÑÏ†Ñ Î™©Î°ù Ï°∞Ìöå"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT version_id, version_name, description, created_at, created_by
            FROM versions 
            WHERE project_id = ?
            ORDER BY created_at DESC
        ''', (project_id,))
        
        versions = []
        for row in cursor.fetchall():
            versions.append({
                'version_id': row[0],
                'version_name': row[1],
                'description': row[2],
                'created_at': row[3],
                'created_by': row[4]
            })
        
        conn.close()
        return versions
    
    def rollback_version(self, project_id: str, version_id: str) -> Dict:
        """Î≤ÑÏ†Ñ Î°§Î∞±"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        # Î≤ÑÏ†Ñ Ïä§ÎÉÖÏÉ∑ Ï°∞Ìöå
        cursor.execute('''
            SELECT snapshot_data FROM versions 
            WHERE project_id = ? AND version_id = ?
        ''', (project_id, version_id))
        
        row = cursor.fetchone()
        if not row:
            conn.close()
            return {'success': False, 'error': 'Î≤ÑÏ†ÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'}
        
        snapshot = json.loads(row[0])
        
        # ÌòÑÏû¨ Ïª¥Ìè¨ÎÑåÌä∏ ÏÇ≠Ï†ú
        cursor.execute('DELETE FROM components WHERE project_id = ?', (project_id,))
        
        # Ïä§ÎÉÖÏÉ∑ÏóêÏÑú Ïª¥Ìè¨ÎÑåÌä∏ Î≥µÏõê
        for component in snapshot.get('components', []):
            cursor.execute('''
                INSERT INTO components 
                (project_id, component_id, type, name, position_x, position_y, 
                 width, height, properties, styles, parent_id, order_index)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                project_id,
                component['component_id'],
                component['type'],
                component['name'],
                component['position_x'],
                component['position_y'],
                component['width'],
                component['height'],
                json.dumps(component['properties']),
                json.dumps(component['styles']),
                component['parent_id'],
                component['order_index']
            ))
        
        conn.commit()
        conn.close()
        
        return {'success': True}
    
    def deploy_project(self, project_id: str, version_id: str, environment: str, deployed_by: str) -> Dict:
        """ÌîÑÎ°úÏ†ùÌä∏ Î∞∞Ìè¨"""
        deployment_id = str(uuid.uuid4())
        
        # ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ Ï°∞Ìöå
        project = self.get_project(project_id)
        if not project:
            return {'success': False, 'error': 'ÌîÑÎ°úÏ†ùÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'}
        
        # Î∞∞Ìè¨ Ìå®ÌÇ§ÏßÄ ÏÉùÏÑ±
        package_path = self.create_deployment_package(project_id, project)
        
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO deployments 
            (project_id, deployment_id, version_id, environment, status, deployed_at, deployed_by)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            project_id,
            deployment_id,
            version_id,
            environment,
            'deployed',
            datetime.now().isoformat(),
            deployed_by
        ))
        
        conn.commit()
        conn.close()
        
        return {
            'deployment_id': deployment_id,
            'package_path': str(package_path),
            'success': True
        }
    
    def create_deployment_package(self, project_id: str, project: Dict) -> Path:
        """Î∞∞Ìè¨ Ìå®ÌÇ§ÏßÄ ÏÉùÏÑ±"""
        project_dir = self.sandbox_path / project_id
        package_path = self.production_path / f"{project['name']}_{project_id}.zip"
        
        with zipfile.ZipFile(package_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in project_dir.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(project_dir)
                    zipf.write(file_path, arcname)
        
        return package_path
    
    def generate_test_data(self, project_id: str, data_type: str) -> Dict:
        """ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        test_data = {
            'users': [
                {'id': 1, 'name': 'ÍπÄÏ≤†Ïàò', 'email': 'kim@test.com', 'role': 'user'},
                {'id': 2, 'name': 'Ïù¥ÏòÅÌù¨', 'email': 'lee@test.com', 'role': 'admin'},
                {'id': 3, 'name': 'Î∞ïÎØºÏàò', 'email': 'park@test.com', 'role': 'user'}
            ],
            'products': [
                {'id': 1, 'name': 'ÏÉÅÌíà A', 'price': 10000, 'category': 'Ï†ÑÏûêÏ†úÌíà'},
                {'id': 2, 'name': 'ÏÉÅÌíà B', 'price': 20000, 'category': 'ÏùòÎ•ò'},
                {'id': 3, 'name': 'ÏÉÅÌíà C', 'price': 15000, 'category': 'ÏãùÌíà'}
            ],
            'orders': [
                {'id': 1, 'user_id': 1, 'product_id': 1, 'quantity': 2, 'total': 20000},
                {'id': 2, 'user_id': 2, 'product_id': 2, 'quantity': 1, 'total': 20000},
                {'id': 3, 'user_id': 3, 'product_id': 3, 'quantity': 3, 'total': 45000}
            ]
        }
        
        if data_type in test_data:
            conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO test_data (project_id, data_type, data_name, data_content)
                VALUES (?, ?, ?, ?)
            ''', (
                project_id,
                data_type,
                f'{data_type}_sample',
                json.dumps(test_data[data_type])
            ))
            
            conn.commit()
            conn.close()
            
            return {'success': True, 'data': test_data[data_type]}
        
        return {'success': False, 'error': 'ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖÏûÖÎãàÎã§.'}
    
    def get_component_library(self) -> Dict:
        """Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨ Î∞òÌôò"""
        return self.component_library
    
    def get_deployment_statistics(self, user_id: str) -> Dict:
        """Î∞∞Ìè¨ ÌÜµÍ≥Ñ Ï°∞Ìöå"""
        conn = sqlite3.connect(self.sandbox_path / "sandbox.db")
        cursor = conn.cursor()
        
        # Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ Ïàò
        cursor.execute('''
            SELECT COUNT(*) FROM development_projects WHERE created_by = ?
        ''', (user_id,))
        total_projects = cursor.fetchone()[0]
        
        # ÏÉÅÌÉúÎ≥Ñ ÌîÑÎ°úÏ†ùÌä∏ Ïàò
        cursor.execute('''
            SELECT status, COUNT(*) FROM development_projects 
            WHERE created_by = ? GROUP BY status
        ''', (user_id,))
        status_counts = dict(cursor.fetchall())
        
        # ÏµúÍ∑º Î∞∞Ìè¨
        cursor.execute('''
            SELECT d.deployment_id, p.name, d.environment, d.deployed_at
            FROM deployments d
            JOIN development_projects p ON d.project_id = p.project_id
            WHERE p.created_by = ?
            ORDER BY d.deployed_at DESC
            LIMIT 5
        ''', (user_id,))
        
        recent_deployments = []
        for row in cursor.fetchall():
            recent_deployments.append({
                'deployment_id': row[0],
                'project_name': row[1],
                'environment': row[2],
                'deployed_at': row[3]
            })
        
        conn.close()
        
        return {
            'total_projects': total_projects,
            'status_counts': status_counts,
            'recent_deployments': recent_deployments
        }

    def create_sample_projects(self):
        """ÏÉòÌîå ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        sample_projects = [
            {
                'name': 'Ï∂úÌá¥Í∑º Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú',
                'description': 'ÏßÅÏõêÎì§Ïùò Ï∂úÌá¥Í∑º ÏãúÍ∞ÑÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Î™®Îìà',
                'module_type': 'attendance',
                'status': 'development',
                'created_by': 'default_user'
            },
            {
                'name': 'Ïû¨Í≥† Í¥ÄÎ¶¨ ÎåÄÏãúÎ≥¥Îìú',
                'description': 'Ïã§ÏãúÍ∞Ñ Ïû¨Í≥† ÌòÑÌô©ÏùÑ Î™®ÎãàÌÑ∞ÎßÅÌïòÎäî ÎåÄÏãúÎ≥¥Îìú',
                'module_type': 'inventory',
                'status': 'deployed',
                'created_by': 'default_user'
            },
            {
                'name': 'Í≥†Í∞ù ÌîºÎìúÎ∞± ÏãúÏä§ÌÖú',
                'description': 'Í≥†Í∞ù ÏùòÍ≤¨ÏùÑ ÏàòÏßëÌïòÍ≥† Î∂ÑÏÑùÌïòÎäî ÏãúÏä§ÌÖú',
                'module_type': 'feedback',
                'status': 'development',
                'created_by': 'default_user'
            }
        ]
        
        for project_data in sample_projects:
            try:
                # ÌîÑÎ°úÏ†ùÌä∏Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
                existing_projects = self.get_projects('default_user')
                project_exists = any(p['name'] == project_data['name'] for p in existing_projects)
                
                if not project_exists:
                    self.create_project(
                        project_data['name'],
                        project_data['description'],
                        project_data['module_type'],
                        project_data['created_by']
                    )
            except Exception as e:
                print(f"ÏÉòÌîå ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")

# Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§
module_development_system = ModuleDevelopmentSystem()
dev_system = module_development_system  # Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Î≥ÑÏπ≠ 