version: '3.8'

services:
  # 백엔드 서버
  backend:
    build: .
    container_name: multitenancy-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/multitenancy
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-change-this
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - multitenancy-network

  # 프론트엔드 서버
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: multitenancy-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - multitenancy-network

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    container_name: multitenancy-db
    environment:
      - POSTGRES_DB=multitenancy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - multitenancy-network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: multitenancy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - multitenancy-network

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: multitenancy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - multitenancy-network

  # 모니터링 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: multitenancy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - multitenancy-network

  # 모니터링 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: multitenancy-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - multitenancy-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  multitenancy-network:
    driver: bridge 
