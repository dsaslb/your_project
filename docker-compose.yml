version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - API_BACKEND_URL=http://backend:5001
      - API_AI_URL=http://ai-server:8002
      - REDIS_URL=redis://redis:6379
    depends_on:
      - backend
      - ai-server
      - redis
    networks:
      - your-program-network
    restart: unless-stopped

  # Backend API Service with Plugin Monitoring
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://your_program:password@postgres:5432/your_program
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - AI_SERVER_URL=http://ai-server:8002
      - PLUGIN_MONITORING_ENABLED=true
      - PLUGIN_BACKUP_ENABLED=true
      - PLUGIN_ALERT_ENABLED=true
      - PLUGIN_MONITORING_INTERVAL=300
      - PLUGIN_BACKUP_INTERVAL=3600
      - PLUGIN_ALERT_INTERVAL=30
    depends_on:
      - postgres
      - redis
    networks:
      - your-program-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./plugins:/app/plugins
      - ./backups:/app/backups
      - ./monitoring:/app/monitoring

  # AI Server Service
  ai-server:
    build:
      context: .
      dockerfile: Dockerfile.ai
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://your_program_ai:password@postgres:5432/your_program_ai
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${AI_SECRET_KEY}
      - MODEL_PATH=/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - your-program-network
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./ai_logs:/app/logs

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    depends_on:
      - gateway
    networks:
      - your-program-network
    restart: unless-stopped

  # Mobile App Service
  mobile:
    build:
      context: ./mobile_app
      dockerfile: Dockerfile
    ports:
      - "19000:19000"
    environment:
      - EXPO_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - gateway
    networks:
      - your-program-network
    restart: unless-stopped

  # Database Service
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=your_program
      - POSTGRES_USER=your_program
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=your_program,your_program_ai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - your-program-network
    restart: unless-stopped

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - your-program-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Message Queue Service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=your_program
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - your-program-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - your-program-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - your-program-network
    restart: unless-stopped

  # Logging Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - your-program-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - your-program-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - your-program-network
    restart: unless-stopped

  # Service Mesh (Istio)
  istio-proxy:
    image: istio/proxyv2:1.19.0
    ports:
      - "15000:15000"
      - "15001:15001"
    environment:
      - ISTIO_META_WORKLOAD_NAME=your-program
      - ISTIO_META_OWNER=kubernetes://apis/apps/v1/namespaces/default/deployments/your-program
    networks:
      - your-program-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - gateway
      - frontend
    networks:
      - your-program-network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=your_program
      - POSTGRES_USER=your_program
      - POSTGRES_PASSWORD=password
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION=7
    volumes:
      - ./backups:/app/backups
      - ./scripts:/app/scripts
    depends_on:
      - postgres
    networks:
      - your-program-network
    restart: unless-stopped

  # Health Check Service
  healthcheck:
    build:
      context: .
      dockerfile: Dockerfile.healthcheck
    environment:
      - SERVICES=gateway,backend,ai-server,frontend,mobile,postgres,redis
    networks:
      - your-program-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  your-program-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
